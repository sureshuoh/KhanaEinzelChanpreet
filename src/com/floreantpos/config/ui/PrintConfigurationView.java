/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrintConfiguration.java
 *
 * Created on Apr 5, 2010, 4:31:47 PM
 */

package com.floreantpos.config.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

import org.apache.commons.lang.StringUtils;

import net.miginfocom.swing.MigLayout;

import com.floreantpos.POSConstants;
import com.floreantpos.bo.ui.BackOfficeWindow;
import com.floreantpos.config.TerminalConfig;
import com.floreantpos.main.Application;
import com.floreantpos.model.PosPrinters;
import com.floreantpos.ui.dialog.POSMessageDialog;

/**
 *
 * @author mshahriar
 */
public class PrintConfigurationView extends ConfigurationView {
	
	PosPrinters printers = Application.getPrinters();

	/** Creates new form PrintConfiguration */
	public PrintConfigurationView() {
		initComponents();
	}

	@Override
	public String getName() {
		return com.floreantpos.POSConstants.CONFIG_TAB_PRINT;
	}

	@Override
	public void initialize() throws Exception {
		PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);
		setBackground(new Color(209,222,235));
		cbReportPrinterName.setModel(new DefaultComboBoxModel(printServices));
		cbReceiptPrinterName.setModel(new DefaultComboBoxModel(printServices));
		cbA4PrinterName.setModel(new DefaultComboBoxModel(printServices));
		cbSonstigePrinterName.setModel(new DefaultComboBoxModel(printServices));
		//cbKitchenPrinterName.setModel(new DefaultComboBoxModel(printServices));

		PrintServiceComboRenderer comboRenderer = new PrintServiceComboRenderer();
		cbReportPrinterName.setRenderer(comboRenderer);
		cbReceiptPrinterName.setRenderer(comboRenderer);
		cbA4PrinterName.setRenderer(comboRenderer);
		cbSonstigePrinterName.setRenderer(comboRenderer);
		//cbKitchenPrinterName.setRenderer(comboRenderer);
		
		cbA4.setSelected(printers.getA4PrinterEnable());
		cbReceipt.setSelected(printers.getReceiptPrinterEnable());
		
		setSelectedPrinter(cbReportPrinterName, printers.getReportPrinter());
		setSelectedPrinter(cbReceiptPrinterName, printers.getReceiptPrinter());
		setSelectedPrinter(cbA4PrinterName, printers.getA4Printer());
		setSelectedPrinter(cbSonstigePrinterName, printers.getSonstigePrinter());

		
		//setSelectedPrinter(cbKitchenPrinterName, PrintConfig.KITCHEN_PRINTER_NAME);

		setInitialized(true);

		if (printServices == null || printServices.length == 0) {
			POSMessageDialog.showMessage(BackOfficeWindow.getInstance(), "Kein Drucker auf Ihrem Betriebssystem installiert ist. Bitte installieren Sie den Drucker aus und wieder kommen.");
		}
	}

	private void setSelectedPrinter(JComboBox whichPrinter, String printerName) {
//		PrintService osDefaultPrinter = PrintServiceLookup.lookupDefaultPrintService();
//
//		if (osDefaultPrinter == null) {
//			return;
//		}

		//String printerName = AppConfig.getString(propertyName, osDefaultPrinter.getName());

		int printerCount = whichPrinter.getItemCount();
		for (int i = 0; i < printerCount; i++) {
			PrintService printService = (PrintService) whichPrinter.getItemAt(i);
			if (printService.getName().equals(printerName)) {
				whichPrinter.setSelectedIndex(i);
				return;
			}
		}
	}

	@Override
	public boolean save() throws Exception {
		PrintService printService = (PrintService) cbReportPrinterName.getSelectedItem();
		printers.setReportPrinter(printService == null ? null : printService.getName());
		//AppConfig.put(PrintConfig.REPORT_PRINTER_NAME, printService == null ? null : printService.getName());
		
		printService = (PrintService) cbReceiptPrinterName.getSelectedItem();
		printers.setReceiptPrinter(printService == null ? null : printService.getName());
				
		printService = (PrintService) cbSonstigePrinterName.getSelectedItem();
		printers.setSonstigePrinter(printService == null ? null : printService.getName());
		
		printService = (PrintService) cbA4PrinterName.getSelectedItem();		
		printers.setA4PrinterEnable(cbA4.isSelected());
		printers.setReceiptPrinterEnable(cbReceipt.isSelected());
		printers.setA4Printer(printService == null ? null : printService.getName());
		
		Application.getPrinters().save();
		
		return true;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		setLayout(new MigLayout("", "[][grow,fill]", "[][][][25px,grow]"));
		
		JLabel lblReportPrinter = new JLabel("");
		
		if(StringUtils.isNotEmpty(POSConstants.Daten_Drucker))
			lblReportPrinter.setText(POSConstants.Daten_Drucker);
		else
			lblReportPrinter.setText("Daten Drucker");
		
		add(lblReportPrinter, "cell 0 0,alignx trailing");
		cbReportPrinterName = new JComboBox();
		cbReportPrinterName.setBackground(Color.WHITE);
		add(cbReportPrinterName, "cell 1 0,growx");
		
		javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
		add(jLabel1);		 
		if(StringUtils.isNotEmpty(POSConstants.Bon_Drucker))
			jLabel1.setText(POSConstants.Bon_Drucker);
		else
			jLabel1.setText("Bon Drucker");
		
		cbReceiptPrinterName = new javax.swing.JComboBox();
		cbReceiptPrinterName.setBackground(Color.WHITE);
		add(cbReceiptPrinterName);
		javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
		add(jLabel3);		
		
		JPanel panel = new JPanel();
		panel.setBackground(new Color(209,222,235));
		panel.setBorder(new TitledBorder("Bitte Waehlen Sie die Drucker aus"));
		panel.setLayout(new MigLayout());
		
		if(StringUtils.isNotEmpty(POSConstants.A4_Drucker))
			jLabel3.setText(POSConstants.A4_Drucker);
		else
			jLabel3.setText("A4 Drucker:");
		
		cbA4PrinterName = new javax.swing.JComboBox();
		cbA4PrinterName.setBackground(Color.WHITE);
		add(cbA4PrinterName, "wrap");
		
		cbReceipt = new javax.swing.JCheckBox("Bon");
		
		if(StringUtils.isNotEmpty(POSConstants.Bon))
			cbReceipt.setText(POSConstants.Bon);
		else
			cbReceipt.setText("Bon");
		
		cbReceipt.setBackground(new Color(209,222,235));
		panel.add(cbReceipt);

		cbA4 = new javax.swing.JCheckBox("A4");
		cbA4.setBackground(new Color(209,222,235));
		
		panel.add(cbA4, "wrap");
		
		JLabel lblSonstiges = new JLabel("Sonstige Printer");
		if(StringUtils.isNotEmpty(POSConstants.Sonstige_Drucker))
			lblSonstiges.setText(POSConstants.Sonstige_Drucker);
		else
			lblSonstiges.setText("Sonstige Printer");
		
		add(lblSonstiges,"growx");
		
		cbProductLabel.setSelected(TerminalConfig.isKitchenLablePrint());
		cbProductLabel.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				TerminalConfig.setKitchenLablePrint(cbProductLabel.isSelected());
				TerminalConfig.setProductLablePrintBig(!cbProductLabel.isSelected());
				cbProductLabel1.setSelected(!cbProductLabel.isSelected());
				if(cbProductLabel.isSelected())
					lblSonstiges.setText("Product Lable Printer");
				else				
					lblSonstiges.setText("Sonstige Printer");				
			}
			
		});
		
		
		cbProductLabel1.setSelected(TerminalConfig.isProductLablePrintBig());
		cbProductLabel1.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				TerminalConfig.setProductLablePrintBig(cbProductLabel1.isSelected());
				TerminalConfig.setKitchenLablePrint(!cbProductLabel1.isSelected());
				cbProductLabel.setSelected(!cbProductLabel1.isSelected());
				if(cbProductLabel1.isSelected()) {
					lblSonstiges.setText("Product Lable Printer");											
				}else				
					lblSonstiges.setText("Sonstige Printer");
				
			}
			
		});
		
		
		
		
		cbSonstigePrinterName = new javax.swing.JComboBox();
		cbSonstigePrinterName.setBackground(Color.WHITE);
		add(cbSonstigePrinterName,"growx");
		
		cbProductLabel.setBackground(new Color(209,222,235));
		panel.add(cbProductLabel,"");
		panel.add(cbProductLabel1,"wrap");
		add(panel,"cell 0 3 3 1,growx");
		
		
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	//private javax.swing.JComboBox cbKitchenPrinterName;
	private JComboBox cbReceiptPrinterName;
	private JComboBox cbReportPrinterName;
	private JComboBox cbA4PrinterName;
	private JCheckBox cbReceipt;
	private JCheckBox cbA4;
	private JComboBox cbSonstigePrinterName;
	private JCheckBox cbProductLabel = new JCheckBox("Lable");
	private JCheckBox cbProductLabel1 = new JCheckBox("Lable Type1 ");



	
	// End of variables declaration//GEN-END:variables

	private class PrintServiceComboRenderer extends DefaultListCellRenderer {
		@Override
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			JLabel listCellRendererComponent = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
			PrintService printService = (PrintService) value;

			if (printService != null) {
				listCellRendererComponent.setText(printService.getName());
			}

			return listCellRendererComponent;
		}
	}

}
