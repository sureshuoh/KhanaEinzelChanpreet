/*
 * PasswordScreen.java
 *
 * Created on August 14, 2006, 11:01 PM
 */

package com.floreantpos.ui.views;

import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.floreantpos.POSConstants;
import com.floreantpos.add.service.AnimationLoader;
import com.floreantpos.add.service.FinazPrufung;
import com.floreantpos.bo.ui.BackOfficeWindow;
import com.floreantpos.config.TerminalConfig;
import com.floreantpos.config.ui.DatabaseConfigurationDialog;
import com.floreantpos.demo.KitchenDisplay;
import com.floreantpos.main.Application;
import com.floreantpos.model.AttendenceHistory;
import com.floreantpos.model.MenuCategory;
import com.floreantpos.model.MenuGroup;
import com.floreantpos.model.MenuItem;
import com.floreantpos.model.Restaurant;
import com.floreantpos.model.Salesreportdb;
import com.floreantpos.model.Shift;
import com.floreantpos.model.Ticket;
import com.floreantpos.model.TicketItem;
import com.floreantpos.model.TicketType;
import com.floreantpos.model.User;
import com.floreantpos.model.UserPermission;
import com.floreantpos.model.UserType;
import com.floreantpos.model.dao.AttendenceHistoryDAO;
import com.floreantpos.model.dao.MenuItemDAO;
import com.floreantpos.model.dao.RestaurantDAO;
import com.floreantpos.model.dao.SalesReportDAO;
import com.floreantpos.model.dao.TicketDAO;
import com.floreantpos.model.dao.TicketItemDAO;
import com.floreantpos.model.dao.UserDAO;
import com.floreantpos.swing.MessageDialog;
import com.floreantpos.swing.POSPasswordField;
import com.floreantpos.swing.PosButton;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.util.BusinessDateUtil;
import com.floreantpos.util.NumberUtil;
import com.floreantpos.util.ShiftException;
import com.floreantpos.util.ShiftUtil;
import com.floreantpos.util.UserNotFoundException;

import net.miginfocom.swing.MigLayout;

/**
 * 
 * @author MShahriar
 */
public class PasswordScreen extends JPanel {

	private JPanel currentScreen;

	/** Creates new form PasswordScreen */
	public PasswordScreen() {
		currentScreen = this;
		// setMinimumSize(new Dimension(320, 10));
		initComponents();

		btnConfigureDatabase.setAction(goAction);
		btnConfigureDatabase.setActionCommand("DBCONFIG");

		applyComponentOrientation(ComponentOrientation.getOrientation(Locale
				.getDefault()));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		buttonPanel = new javax.swing.JPanel();
		btn7 = new com.floreantpos.swing.PosButton();
		btn00 = new com.floreantpos.swing.PosButton();
		btn8 = new com.floreantpos.swing.PosButton();
		btn9 = new com.floreantpos.swing.PosButton();
		btn4 = new com.floreantpos.swing.PosButton();
		btn5 = new com.floreantpos.swing.PosButton();
		btn6 = new com.floreantpos.swing.PosButton();
		btn1 = new com.floreantpos.swing.PosButton();
		btn2 = new com.floreantpos.swing.PosButton();
		btn3 = new com.floreantpos.swing.PosButton();
		posButton3 = new com.floreantpos.swing.PosButton();
		posButton1 = new com.floreantpos.swing.PosButton();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		btnConfigureDatabase = new com.floreantpos.swing.PosButton();
		btnExit = new com.floreantpos.swing.PosButton();
		btnShutdown = new com.floreantpos.swing.PosButton();
		setPreferredSize(new Dimension(320, 593));
		setLayout(new MigLayout("insets 0", "[380px,grow]",
				"[110px][270px][grow,fill][grow]"));

		buttonPanel.setOpaque(false);
		buttonPanel.setPreferredSize(new java.awt.Dimension(200, 180));
		buttonPanel.setLayout(new MigLayout("insets 0", "[111px][111px][111px,grow]",
				"[60px][60px][60px][60px]"));

		btn7.setAction(loginAction);
		btn7.setActionCommand("7");
		btn7.setText("7");
		setFont(btn7);
		btn7.setFocusable(false);
		buttonPanel.add(btn7, "cell 0 0,grow");

		btn8.setAction(loginAction);
		setFont(btn8);
		btn8.setActionCommand("8");
		btn8.setText("8");
		btn8.setFocusable(false);
		buttonPanel.add(btn8, "cell 1 0,grow");

		btn9.setAction(loginAction);
		btn9.setText("9");
		setFont(btn9);
		btn9.setActionCommand("9");
		btn9.setFocusable(false);
		buttonPanel.add(btn9, "cell 2 0,grow");

		btn4.setAction(loginAction);
		btn4.setText("4");
		setFont(btn4);
		btn4.setActionCommand("4");
		btn4.setFocusable(false);
		buttonPanel.add(btn4, "cell 0 1,grow");

		btn5.setAction(loginAction);
		btn5.setText("5");
		setFont(btn5);
		btn5.setActionCommand("5");
		btn5.setFocusable(false);
		buttonPanel.add(btn5, "cell 1 1,grow");

		btn6.setAction(loginAction);
		setFont(btn6);
		btn6.setText("6");
		btn6.setActionCommand("6");
		btn6.setFocusable(false);
		buttonPanel.add(btn6, "cell 2 1,grow");

		btn1.setAction(loginAction);
		btn1.setText("1");
		setFont(btn1);
		btn1.setActionCommand("1");
		btn1.setFocusable(false);
		buttonPanel.add(btn1, "cell 0 2,grow");

		btn2.setAction(loginAction);
		setFont(btn2);
		btn2.setText("2");
		btn2.setActionCommand("2");
		btn2.setFocusable(false);
		buttonPanel.add(btn2, "cell 1 2,grow");

		btn3.setAction(loginAction);
		btn3.setText("3");
		setFont(btn3);
		btn3.setActionCommand("3");
		btn3.setFocusable(false);
		buttonPanel.add(btn3, "cell 2 2,grow");

		posButton3.setAction(loginAction);
		setFont(posButton3);
		posButton3.setText("0");
		posButton3.setActionCommand("0");
		posButton3.setFocusable(false);
		buttonPanel.add(posButton3, "cell 0 3,grow");

		btn00.setAction(loginAction);
		setFont(btn00);
		btn00.setText("00");
		btn00.setActionCommand("00");
		btn00.setFocusable(false);
		buttonPanel.add(btn00, "cell 1 3,grow");

		posButton1.setAction(goAction);
		posButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/clear_32.png"))); // NOI18N
		posButton1.setActionCommand(com.floreantpos.POSConstants.CLEAR);
		setFont(posButton1);
		posButton1.setFocusable(false);
		posButton1.setPreferredSize(new java.awt.Dimension(90, 50));
		buttonPanel.add(posButton1, "cell 2 3,grow");
		add(buttonPanel, "cell 0 1,grow");

		buttonPanel.setBackground(new Color(35, 35, 36));
		jPanel2.setOpaque(false);
		jPanel2.setBackground(new Color(35, 35, 36));
		jLabel4.setText(com.floreantpos.POSConstants.USER_TYPE + ":");
		add(jPanel2, "cell 0 0,growx,aligny top");
		jPanel2.setLayout(new MigLayout("insets 0", "[343px]", "[][22px][31px][30px]"));

		/*
		 * lblTerminalId = new JLabel("TERMINAL ID:");
		 * lblTerminalId.setHorizontalAlignment(SwingConstants.CENTER);
		 * jPanel2.add(lblTerminalId, "cell 0 0,growx");
		 */
		jLabel2 = new javax.swing.JLabel();
		jLabel2.setHorizontalAlignment(SwingConstants.CENTER);

		jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabel2.setBackground(new java.awt.Color(204, 102, 0));
		jLabel2.setForeground(Color.WHITE);
		jLabel2.setText(com.floreantpos.POSConstants.ENTER_YOUR_PASSWORD);
		jPanel2.add(jLabel2, "cell 0 1,growx,aligny top");
		tfPassword = new POSPasswordField();
		tfPassword.setFocusCycleRoot(true);
		tfPassword.setFont(new java.awt.Font("Courier", 1, 18));
		tfPassword.setHorizontalAlignment(SwingConstants.CENTER);
		tfPassword.addKeyListener(new KeyListener() {

			@Override
			public void keyTyped(KeyEvent e) {
			}

			@Override
			public void keyReleased(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					doLogin();
				} else {
					checkLogin(String.valueOf(e.getKeyChar()));
				}
			}

			@Override
			public void keyPressed(KeyEvent e) {
			}
		});
		jPanel2.add(tfPassword, "cell 0 2,growx,aligny top");

		msgLabel = new JLabel("");
		msgLabel.setHorizontalAlignment(SwingConstants.CENTER);
		jPanel2.add(msgLabel, "cell 0 3,grow");

		panel = new JPanel();
		panel.setBackground(new Color(35, 35, 36));
		add(panel, "cell 0 2,grow");

		jPanel3.setLayout(new GridLayout(0, 1, 0, 0));
		jPanel3.setBackground(new Color(35, 35, 36));
		psbtnLogin = new PosButton();
		psbtnLogin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				doLogin();
			}
		});
		psbtnLogin.setText("LOGIN");
		//		 jPanel3.add(psbtnLogin);

		PosButton psbtnFinaz = new PosButton();		
		psbtnFinaz.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {				
				try {
					new SwingWorker<Void, String>() {
						@Override
						protected Void doInBackground() throws Exception {
							FinazPrufung prufung = new FinazPrufung();							
							prufung.waitForNotifying();
							prufung.showGdpdu();
							return null;
						}

						@Override
						protected void done() {
							AnimationLoader.getLoader().closeInsertDialog();
						}
					}.execute();
				} catch (Exception ex) {

				}
				/*try{
					waitForNotifying();
					if(count>=100) {
						return;
					}						
					showGdpdu();					
				}catch(Exception ex){

				}*/
			}
		});
		psbtnFinaz.setText("FINANZPRÜFUNG");
		if(TerminalConfig.isFinanzPrufung())
			jPanel3.add(psbtnFinaz);

		btnConfigureDatabase.setAction(goAction);
		btnConfigureDatabase
		.setText(com.floreantpos.POSConstants.CONFIGURE_DATABASE);
		btnConfigureDatabase.setFocusable(false);
		btnExit.setAction(goAction);
		btnExit.setText(com.floreantpos.POSConstants.EXIT);
		btnExit.setFocusable(false);
		btnExit.setBackground(new Color(144,74,5));
		btnExit.setForeground(Color.WHITE);

		if (TerminalConfig.isFullscreenMode()) {
			btnConfigureDatabase.setVisible(false);
		}

		jPanel3.add(btnExit);

		btnShutdown.setAction(goAction);
		btnShutdown.setText(com.floreantpos.POSConstants.SHUTDOWN);
		btnShutdown.setFocusable(false);
		btnShutdown.setBackground(new Color(125,6,42));
		btnShutdown.setForeground(Color.WHITE);
		jPanel3.add(btnShutdown);

		add(jPanel3, "cell 0 3,growx,aligny bottom");
		setBackground(new Color(35, 35, 36));
	}// </editor-fold>//GEN-END:initComponents

	public void setFont(PosButton button) {
		button.setBackground(new Color(102, 51, 0));
		button.setForeground(Color.WHITE);
		button.setFont(new Font(null, Font.BOLD, 20));
	}

	public synchronized void doLogin() {
		try {
			tfPassword.setEnabled(false);

			Application application = Application.getInstance();

			String secretKey = capturePassword();		

			if (secretKey.compareTo("Out") == 0) {
				tfPassword.setText("");
				return;
			}

			UserDAO dao = new UserDAO();
			User user = dao.findUserBySecretKey(secretKey);

			if (TerminalConfig.isSuperAdmin() && secretKey.equals(TerminalConfig.getSuperAdminPassword())) {
				user = new User();
				UserType userType = new UserType();
				userType.setName("Admin");
				Set<UserPermission> permissions = new HashSet<>();
				UserPermission permission = new UserPermission();
				permission
				.setName(UserPermission.PERFORM_ADMINISTRATIVE_TASK.getName());
				permissions.add(permission);
				userType.setPermissions(permissions);
				user.setFirstName("Super-User");
				user.setLastName("SU");
				user.setType(userType);				
			}		

			if (user == null) {
				throw new UserNotFoundException();
			}

			Shift currentShift = ShiftUtil.getCurrentShift();
			if (currentShift == null) {
				throw new ShiftException(POSConstants.NO_SHIFT_CONFIGURED);
			}
			
			application.setCurrentUser(user);
			application.setCurrentShift(currentShift);

			tfPassword.setText("");
			SwitchboardView.getInstance().updateButtons();
			SwitchboardView.getInstance().doCreateNewTicket(TicketType.DINE_IN);
		} catch (UserNotFoundException e) {
			LogFactory.getLog(Application.class).error(e);
			POSMessageDialog.showError("Benutzer nicht gefunden");
			msgLabel.setText("Fehler bei der Anmeldung, bitte wiederholen...");
			return;
		} catch (ShiftException e) {
			LogFactory.getLog(Application.class).error(e);
			MessageDialog.showError(e.getMessage());
		} catch (Exception e1) {
			e1.printStackTrace();
			LogFactory.getLog(Application.class).error(e1);
			String message = e1.getMessage();

			if (message != null && message.contains("Cannot open connection")) {
				MessageDialog
				.showError("Es konnte keine Verbindung zum Server hergestellt werden. Bitte ueberpruefen Sie die Datenbankkonfiguration.");
				DatabaseConfigurationDialog.show(Application.getPosWindow());
			} else {
				MessageDialog
				.showError("Es tut uns leid, ein unerwarteter Fehler ist aufgetreten");
			}
		} finally {
			tfPassword.setEnabled(true);
			tfPassword.requestFocus();
		}
	}

	public void doLoginAdimat(String secretKey) {

		tfPassword.setText(secretKey);
		doLogin(secretKey);
		return;

	}

	public synchronized boolean doLogin(String secretKey) {
		try {
			UserDAO dao = new UserDAO();
			User user;		
			if(TerminalConfig.getKeyType().compareTo("addimat")==0) {
				if(secretKey.length()>16)
					user = dao.findUserByAdimatKey(secretKey.substring(0,16));
				else
					user = dao.findUserByAdimatKey(secretKey);
			}else {			
				user = dao.findUserByAdimatKey(secretKey);
			}	
			Application application = Application.getInstance();

			if (user == null) {

				doLogout();
				return false;
			}		

			Shift currentShift = ShiftUtil.getCurrentShift();
			if (currentShift == null) {
				throw new ShiftException(POSConstants.NO_SHIFT_CONFIGURED);
			}

			application.setCurrentUser(user);
			application.setCurrentShift(currentShift);

			tfPassword.setText("");
			SwitchboardView.getInstance().updateButtons();
			SwitchboardView.getInstance().doCreateNewTicket(TicketType.DINE_IN);
			/*
			 * MessageDialog.
			 * showError("Es konnte keine Verbindung zum Server hergestellt werden. Bitte ueberpruefen Sie die Datenbankkonfiguration."
			 * ); DatabaseConfigurationDialog.show(Application.getPosWindow());
			 */
		} catch (UserNotFoundException e) {
			LogFactory.getLog(Application.class).error(e);
			POSMessageDialog.showError("Benutzer nicht gefunden");
			msgLabel.setText("Fehler bei der Anmeldung, bitte wiederholen...");
		} catch (ShiftException e) {
			LogFactory.getLog(Application.class).error(e);
			MessageDialog.showError(e.getMessage());

		} catch (Exception e1) {
			e1.printStackTrace();
			LogFactory.getLog(Application.class).error(e1);
			String message = e1.getMessage();
			if (message != null && message.contains("Cannot open connection")) {
				MessageDialog.showError(
						"Es konnte keine Verbindung zum Server hergestellt werden. Bitte ueberpruefen Sie die Datenbankkonfiguration.");
				DatabaseConfigurationDialog.show(Application.getPosWindow());
			}
		} finally {
			tfPassword.setEnabled(true);
			tfPassword.requestFocus();
		}
		return false;
	}


	private void doLogout() {
		BackOfficeWindow.getInstance().dispose();
		KitchenDisplay.instance.dispose();
		Application.getInstance().logout();
	}


	private void adjustUserShift(User user, Shift currentShift) {
		Application application = Application.getInstance();
		Calendar currentTime = Calendar.getInstance();

		if (user.isClockedIn() != null && user.isClockedIn().booleanValue()) {
			Shift userShift = user.getCurrentShift();
			Date userLastClockInTime = user.getLastClockInTime();
			long elaspedTimeSinceLastLogin = Math.abs(currentTime.getTimeInMillis()
					- userLastClockInTime.getTime());

			if (userShift != null) {
				if (!userShift.equals(currentShift)) {
					reClockInUser(currentTime, user, currentShift);
				} else if (userShift.getShiftLength() != null
						&& (elaspedTimeSinceLastLogin >= userShift.getShiftLength())) {
					reClockInUser(currentTime, user, currentShift);
				}
			} else {
				user.doClockIn(application.getTerminal(), currentShift, currentTime);
			}
		} else {
			user.doClockIn(application.getTerminal(), currentShift, currentTime);
		}
	}

	private String capturePassword() {
		char[] password = tfPassword.getPassword();
		String newPass = new String(password);
		return newPass;
	}

	public void setTerminalId(int terminalId) {
		// lblTerminalId.setText("TERMINAL ID: " + terminalId);
	}

	private void reClockInUser(Calendar currentTime, User user, Shift currentShift) {
		POSMessageDialog.showMessage("You will be clocked out from previous Shift");

		Application application = Application.getInstance();
		AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();

		AttendenceHistory attendenceHistory = attendenceHistoryDAO
				.findHistoryByClockedInTime(user);
		if (attendenceHistory == null) {
			attendenceHistory = new AttendenceHistory();
			Date lastClockInTime = user.getLastClockInTime();
			Calendar c = Calendar.getInstance();
			c.setTime(lastClockInTime);
			attendenceHistory.setClockInTime(lastClockInTime);
			attendenceHistory.setClockInHour(Short.valueOf((short) c
					.get(Calendar.HOUR)));
			attendenceHistory.setUser(user);
			attendenceHistory.setTerminal(application.getTerminal());
			attendenceHistory.setShift(user.getCurrentShift());
		}
		user.doClockOut(attendenceHistory, currentShift, currentTime);
		user.doClockIn(application.getTerminal(), currentShift, currentTime);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private com.floreantpos.swing.PosButton btnConfigureDatabase;
	private com.floreantpos.swing.PosButton btnExit;
	private com.floreantpos.swing.PosButton btnShutdown;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private com.floreantpos.swing.PosButton posButton1;
	private com.floreantpos.swing.PosButton btn5;
	private com.floreantpos.swing.PosButton btn00;
	private com.floreantpos.swing.PosButton btn6;
	private com.floreantpos.swing.PosButton btn9;
	private com.floreantpos.swing.PosButton btn8;
	private com.floreantpos.swing.PosButton posButton3;
	private com.floreantpos.swing.PosButton btn7;
	private com.floreantpos.swing.PosButton btn3;
	private com.floreantpos.swing.PosButton btn2;
	private com.floreantpos.swing.PosButton btn1;
	private com.floreantpos.swing.PosButton btn4;
	private POSPasswordField tfPassword;
	// End of variables declaration//GEN-END:variables

	Action goAction = new AbstractAction() {
		public void actionPerformed(ActionEvent e) {

			String command = e.getActionCommand();
			if (com.floreantpos.POSConstants.CLEAR.equals(command)) {
				if (tfPassword.hasFocus()) {
					tfPassword.setText("");
				}
			} else if (com.floreantpos.POSConstants.LOGIN.equals(command)) {
				doLogin();
			} else if (com.floreantpos.POSConstants.EXIT.equals(command)) {
				Application.getInstance().exitPOS(false);
			} else if ("DBCONFIG".equalsIgnoreCase(command)) {
				DatabaseConfigurationDialog.show(Application.getPosWindow());
			} else if (com.floreantpos.POSConstants.SHUTDOWN.equals(command)) {
				 Application.getInstance().shutdownPOS();
			} else {
				String newPass = capturePassword();
				newPass += command;
				tfPassword.setText(newPass);
			}
		}
	};

	Action loginAction = new AbstractAction() {
		public void actionPerformed(ActionEvent e) {
			tfPassword.setText(capturePassword() + e.getActionCommand());
			checkLogin(e.getActionCommand());

		}
	};
	private JPanel panel;
	private JLabel msgLabel;
	private PosButton psbtnLogin;

	// private JLabel lblTerminalId;

	public void setFocus() {
		tfPassword.setText("");
		tfPassword.requestFocus();
	}

	private void checkLogin(String key) {
		msgLabel.setText("");

		String secretKey = capturePassword();
		if (secretKey != null
				&& secretKey.length() == TerminalConfig.getDefaultPassLen()) {
			Thread loginThread = new Thread(new Runnable() {
				@Override
				public void run() {
					doLogin();
					tfPassword.setText("");
					Application.getInstance().getPosWindow().timeee();
				}
			});

			loginThread.start();
		}
	}

	static File[] oldListRoot = File.listRoots();
	static String drive = "L:/";
	public static String getDrive() {
		return drive;
	}

	public static void setDrive(String drive) {
		PasswordScreen.drive = drive;
	}

	public static void waitForNotifying() {
		count =0;
		String[] drive_name = new String[]{ "D","E", "F", "G", "H", "I" ,"J","K", "L","M", "N"};
		//here we initialize an array for the usb that is to be inserted
		File[] usb = new File[drive_name.length];
		//if the usb is detected then it is assigned True else False
		boolean[] usb_detected = new boolean[drive_name.length];


		for ( int i = 0; i < drive_name.length; ++i )
		{
			usb[i] = new File(drive_name[i]+":/");
			usb_detected[i] = usb[i].canRead();
		}

		POSMessageDialog.showError("Bitte Usb Einstecken!!!");		
		detect(usb,drive_name,usb_detected);		
	}

	static int count;    
	public static void detect(File[] usb,String[] drive_name,boolean[] usb_detected)
	{
		boolean found=false;

		while(!found&&count<=100)
		{
			//the following loop is iterated to find the usb inserted
			for ( int i = 0; i < drive_name.length; ++i )
			{
				boolean if_detected;
				if_detected = usb[i].canRead();
				if ( if_detected != usb_detected[i] )
				{
					if ( if_detected )
						System.out.println("USB "+drive_name[i]+" detected ");
					setDrive(drive_name[i]+":/");
					found = true;
					break;
				}
			}
			System.out.println("USB "+count);
			count++;
		}
	}
	public void showGdpdu() throws IOException {

		SimpleDateFormat df1 = new SimpleDateFormat("dd_MM_yyyy");
		File directory = new File(getDrive());
		if (!directory.exists()) {
			directory.mkdirs();
			System.out.println("file directy1  "+directory.toString()+"created");			
		}
		String mainDirectory = df1.format(new Date());
		directory.mkdir();
		directory = new File(getDrive()+"gdpdu/" + mainDirectory);
		System.out.println("file directy  "+directory.toString());

		if (!directory.exists()) {
			directory.mkdirs();
			System.out.println("file directy  "+directory.toString()+"created");

		}

		boolean failed = false;
		if (!GdpduSalesReport(directory.getPath())) {
			failed = true;
		}
		if (!GdpduTicket(directory.getPath())) {
			failed = true;
		}
		if (!GdpduTicketItem(directory.getPath())) {
			failed = true;
		}
		if (!GdpduMenuItem(directory.getPath())) {
			failed = true;
		}
		
		if (!failed) {
			JOptionPane.showMessageDialog(null, "Erfolg");
		}		
	}

	public boolean GdpduTicket(String dir) throws IOException {
		System.out.println(dir);
		SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy");
		Date startDate;
		try {
			startDate = df.parse(TerminalConfig.getStartDate());
		} catch (Exception e) {
			e.printStackTrace();
			POSMessageDialog.showError("Fehler");
			return false;
		}
		Session session = TicketDAO.getInstance().createNewSession();
		Transaction tx = session.beginTransaction();

		startDate = BusinessDateUtil.startOfOfficialDay(startDate);
		Date endDate = BusinessDateUtil.endOfOfficialDay(new Date());
		try {
			FileWriter writer = new FileWriter(dir + "/Rechnungen.csv");
			writer.append("Id");
			writer.append(';');
			writer.append("Kellner");
			writer.append(';');
			writer.append("Zeit_Erstellt");
			writer.append(';');
			writer.append("Type");
			writer.append(';');
			writer.append("Gesamt");
			writer.append(';');
			writer.append("Status");
			writer.append(';');
			writer.append("Hash");
			writer.append(';');
			writer.append('\n');
			List<Ticket> tickets = TicketDAO.getInstance().findGdpduTickets(startDate, endDate);

			List<Ticket> newTickets = TicketDAO.getInstance().findGdpduTicketsNoSrToday();
			if (newTickets != null && !newTickets.isEmpty()) {
				tickets.addAll(newTickets);
			}

			Collections.sort(tickets, new Ticket.ItemComparator());
			Integer index = 1;
			for (Ticket ticket : tickets) {
				writer.append(index + "");

				ticket.setGdpduid(index);
				writer.append(';');
				User owner = ticket.getOwner();
				writer.append(owner != null ? owner.getFirstName() : StringUtils.EMPTY);
				writer.append(';');
				SimpleDateFormat dt = new SimpleDateFormat("dd.MM.yyyy HH:mm");
				String createDate = ticket.getCreateDate() != null ? dt.format(ticket.getCreateDate()) : StringUtils.EMPTY;
				writer.append(createDate);
				writer.append(';');
				writer.append(ticket.getType() == TicketType.DINE_IN ? POSConstants.DINE_IN : POSConstants.HOME_DELIVERY);
				writer.append(';');
				String totalAmount = NumberUtil.formatNumber(ticket.getTotalAmount());
				writer.append(NumberUtil.formatNumber(ticket.getTotalAmount()));
				writer.append(';');
				String status = "";
				if (ticket.isPaid()) {
					if (ticket.getCashPayment() != null && ticket.getCashPayment())
						status = "Bar Bezahlt";
					else if (ticket.getOnlinePayment() != null && ticket.getOnlinePayment())
						status = "Online Bezahlt";
					else if (ticket.getCashPayment() != null && !ticket.getCashPayment())
						status = "Karte Bezahlt";
				} else {
					status = "Nicht bezahlt";
				}
				writer.append(status);
				writer.append(';');
				String hash = md5(String.valueOf(index + createDate + totalAmount));
				writer.append(hash);
				writer.append(';');
				writer.append('\n');
				session.saveOrUpdate(ticket);
				index++;
			}
			writer.flush();
			writer.close();
			tx.commit();
			session.close();
			return true;
		}catch(Exception ex) {
			ex.printStackTrace();				
			return false;

		}


	}

	private String md5(String object) {
		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (md != null) {
			md.update(object.getBytes());
			byte[] digest = md.digest();
			return DatatypeConverter.printHexBinary(digest).toUpperCase();
		}
		return StringUtils.EMPTY;
	}

	public boolean GdpduTicketItem(String dir) throws IOException {
		SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy");
		try {
			Restaurant restaurant = RestaurantDAO.getRestaurant();
			Date startDate;
			try {
				startDate = df.parse(TerminalConfig.getStartDate());
			} catch (Exception e) {
				e.printStackTrace();
				POSMessageDialog.showError("Fehler");
				return false;
			}
			startDate = BusinessDateUtil.startOfOfficialDay(startDate);
			Date endDate = BusinessDateUtil.endOfOfficialDay(new Date());
			SimpleDateFormat df1 = new SimpleDateFormat("dd_MM_yyyy");
			String str = df1.format(startDate) + "_bis_" + df.format(endDate);
			FileWriter writer = new FileWriter(dir + "/Artikel.csv");
			writer.append("Id");
			writer.append(';');
			writer.append("Name");
			writer.append(';');
			writer.append("Gruppe");
			writer.append(';');
			writer.append("Kategorie");
			writer.append(';');
			writer.append("Zeit erstellt");
			writer.append(';');
			writer.append("Steuer");
			writer.append(';');
			writer.append("Einzelpreis");
			writer.append(';');
			writer.append("Anz.");
			writer.append(';');
			writer.append("Gesamt");
			writer.append(';');
			writer.append('\n');

			List<TicketItem> ticketItems = TicketItemDAO.getInstance().findAllByDates(startDate, endDate);
			Collections.sort(ticketItems, new TicketItem.DateComparator());
			for (TicketItem ticketItem : ticketItems) {
				Ticket ticket = ticketItem.getTicket();
				if (ticket == null || ticket.getGdpduid() == 0) {
					continue;
				}
				if (ticket != null && ticket.getGdpduid() != null) {
					writer.append(ticket.getGdpduid() + "");
					writer.append(';');
				}
				writer.append(ticketItem.getName());
				writer.append(';');
				writer.append(ticketItem.getGroupName() != null ? ticketItem.getGroupName() : StringUtils.EMPTY);
				writer.append(';');
				writer.append(ticketItem.getCategoryName() != null ? ticketItem.getCategoryName() : StringUtils.EMPTY);
				writer.append(';');
				String date = null;
				if (ticketItem.getModifiedTime() != null) {
					SimpleDateFormat dt = new SimpleDateFormat("dd.MM.yyyy HH:mm");
					date = ticketItem.getCreateDate() == null
							? ticket.getCreateDate() != null ? dt.format(ticket.getCreateDate()) : null
									: dt.format(ticketItem.getCreateDate());
				}
				writer.append(date != null ? date : "");
				writer.append(';');

				writer.append(NumberUtil.formatNumber(ticketItem.getTaxRate()));
				writer.append(';');
				writer.append(NumberUtil.formatNumber(ticketItem.getUnitPrice()));
				writer.append(';');
				writer.append(ticketItem.getItemCount() + "");
				writer.append(';');
				writer.append(NumberUtil.formatNumber(ticketItem.getTotalAmount()));
				writer.append(';');
				writer.append('\n');
			}
			writer.flush();
			writer.close();
		} catch (Exception xpxw) {
			xpxw.printStackTrace();
			return false;
		}
		return true;
	}

	public boolean GdpduMenuItem(String dir) throws IOException {
		FileWriter writer = new FileWriter(dir + "/Speisekarte.csv");
		writer.append("Artikel Id");
		writer.append(';');
		writer.append("Name");
		writer.append(';');
		writer.append("Preis");
		writer.append(';');
		writer.append("Steuer");
		writer.append(';');
		writer.append("Kategorie");
		writer.append(';');
		writer.append("Gruppe");
		writer.append(';');
		writer.append('\n');

		List<MenuItem> menuitems = MenuItemDAO.getInstance().findAll();
		for (MenuItem item : menuitems) {
			writer.append(item.getItemId());
			writer.append(';');
			writer.append(item.getName());
			writer.append(';');
			writer.append(NumberUtil.formatNumber(item.getPrice()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(item.getTax().getRate()));
			writer.append(';');
			MenuCategory category = null;
			MenuGroup group = item.getParent();
			if (group != null) {
				category = group.getParent();
			}
			writer.append(category != null ? category.getName() : StringUtils.EMPTY);
			writer.append(';');
			writer.append(group != null ? group.getName() : StringUtils.EMPTY);
			writer.append(';');
			writer.append('\n');
		}
		writer.flush();
		writer.close();
		return true;
	}

	public boolean GdpduSalesReport(String dir) throws IOException {
		FileWriter writer = new FileWriter(dir + "/Tagesbericht.csv");
		writer.append("Id");
		writer.append(';');
		writer.append("von");
		writer.append(';');
		writer.append("bis");
		writer.append(';');
		writer.append("Datum");
		writer.append(';');
		writer.append("Speisen+Getraenke");
		writer.append(';');
		writer.append("Speisen+Getraenke Mwst.");
		writer.append(';');
		writer.append("Umsatz Gesamt");
		writer.append(';');
		writer.append("Mwst 19%");
		writer.append(';');
		writer.append("Mwst 7%");
		writer.append(';');
		writer.append("Bar bezahlt");
		writer.append(';');
		writer.append("Bar bezahlt Mwst.");
		writer.append(';');
		writer.append("EC karte");
		writer.append(';');
		writer.append("EC karte Mwst.");
		writer.append(';');
		writer.append("Online");
		writer.append(';');
		writer.append("Online Mwst.");
		writer.append(';');
		writer.append('\n');
		List<Salesreportdb> saleslist = SalesReportDAO.getInstance().findAll();
		for (Salesreportdb salesreport : saleslist) {
			Double totalfooddrinks = salesreport.getFood() + salesreport.getBeverage();
			Double totalfooddrinkstax = salesreport.getFoodtax() + salesreport.getBeveragetax();
			writer.append(salesreport.getSalesid() + "");
			writer.append(';');

			SimpleDateFormat dateTimeFormatter = new SimpleDateFormat("dd-MM-yyyy");
			String startdate = dateTimeFormatter.format(salesreport.getStartdate());
			String enddate = dateTimeFormatter.format(salesreport.getEnddate());

			writer.append(startdate);
			writer.append(';');
			writer.append(enddate);
			writer.append(';');
			writer.append(salesreport.getReporttime());
			writer.append(';');
			writer.append(NumberUtil.formatNumber(totalfooddrinks));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(totalfooddrinkstax));
			writer.append(';');

			writer.append(NumberUtil.formatNumber(salesreport.getAwt()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getAwtn()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getAwts()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getCashpayment()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getCashtax()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getCardpayment()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getCardtax()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getOnline()));
			writer.append(';');
			writer.append(NumberUtil.formatNumber(salesreport.getOnlinetax()));
			writer.append(';');
			writer.append('\n');
		}
		writer.flush();
		writer.close();
		return true;
	}
}
