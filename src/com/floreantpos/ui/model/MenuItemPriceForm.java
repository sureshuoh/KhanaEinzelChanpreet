/*
 * MenuItemModifierGroupForm.java
 *
 * Created on October 12, 2006, 11:48 PM
 */

package com.floreantpos.ui.model;

import java.awt.Color;
import javax.swing.JComboBox;

import com.floreantpos.model.MenuItemPrice;
import com.floreantpos.model.PropertyData;
import com.floreantpos.model.dao.PropertyDataDAO;
import com.floreantpos.ui.BeanEditor;
import com.floreantpos.util.NumberUtil;

public class MenuItemPriceForm extends BeanEditor {
    
    /** Creates new form MenuItemModifierGroupForm */
    public MenuItemPriceForm() {
        this(new MenuItemPrice());
    }
    
    public MenuItemPriceForm(MenuItemPrice menuItemPrice) {
    	initComponents();
    	setBean(menuItemPrice);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
    	jLabelName = new javax.swing.JLabel();
        jLabelPrice = new javax.swing.JLabel();
       
        cbName = new JComboBox();
        cbName.setBackground(Color.WHITE);
		for (PropertyData data: PropertyDataDAO.getInstance().findAll())
			cbName.addItem(data);
        tfPrice = new javax.swing.JTextField(30);

        jLabelName.setText("Name:");
        jLabelPrice.setText("Preis:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelName)
                    .add(jLabelPrice))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, cbName)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, tfPrice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelName)
                    .add(cbName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelPrice)
                    .add(tfPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JComboBox<PropertyData> cbName;
    private javax.swing.JTextField tfPrice;
    // End of variables declaration//GEN-END:variables
    
	@Override
	public boolean save() {
		return updateModel();
	}

	@Override
	protected void updateView() {
		MenuItemPrice menuitemprice = (MenuItemPrice) getBean();
		if(menuitemprice.getName() != null)
		{
			PropertyData property = null;
			for(PropertyData propertyd: PropertyDataDAO.getInstance().getProperty(menuitemprice.getName()))
			{
				property = propertyd;
				break;
			}
			if(property != null)
				cbName.setSelectedItem(property);
		}
		if(menuitemprice.getPrice() != null)
			tfPrice.setText(NumberUtil.formatNumber(menuitemprice.getPrice()));
	}
	
	@Override
	protected boolean updateModel() {
		String name = "";
		Double price = 0.00;
		
		try {
			name = cbName.getSelectedItem().toString();
			price = Double.parseDouble(tfPrice.getText().replace(',','.'));
		} catch (Exception e) {  }
		
		MenuItemPrice menuitemprice = (MenuItemPrice) getBean();
		
		menuitemprice.setName(name);
		menuitemprice.setPrice(price);
		
		return true;
	}

	@Override
	public String getDisplayText() {
		MenuItemPrice menuItemPrice = (MenuItemPrice) getBean();
		if(menuItemPrice.getId() == null) {
			return "Preis Hinzufuegen";
		}
		return "Preis Bearbeiten";
	}
}
