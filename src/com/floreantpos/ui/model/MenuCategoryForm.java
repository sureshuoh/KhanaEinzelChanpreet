/*
 * CategoryBeanEditor.java
 *
 * Created on July 30, 2006, 11:20 PM
 */

package com.floreantpos.ui.model;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.JLabel;

import org.apache.commons.lang.StringUtils;

import com.floreantpos.POSConstants;
import com.floreantpos.config.TerminalConfig;
import com.floreantpos.model.Customer;
import com.floreantpos.model.MenuCategory;
import com.floreantpos.model.dao.CustomerDAO;
import com.floreantpos.model.dao.MenuCategoryDAO;
import com.floreantpos.swing.FixedLengthDocument;
import com.floreantpos.swing.MessageDialog;
import com.floreantpos.ui.BeanEditor;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.util.POSUtil;

/**
 *
 * @author MShahriar
 */
public class MenuCategoryForm extends BeanEditor {

  /** Creates new form CategoryBeanEditor */
  public MenuCategoryForm() throws Exception {
    this(new MenuCategory());
  }

  public MenuCategoryForm(MenuCategory category) throws Exception {
    initComponents();

    tfName.setDocument(new FixedLengthDocument(20));
    setBean(category);
  }
  MenuCategory foodCategory;
  @Override
public String getDisplayText() {
    foodCategory = (MenuCategory) getBean();
    if (foodCategory.getId() == null) {
      return com.floreantpos.POSConstants.NEW_MENU_CATEGORY;
    }
    return com.floreantpos.POSConstants.EDIT_MENU_CATEGORY;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // desc=" Generated Code ">//GEN-BEGIN:initComponents
  
  public static MenuCategoryForm mForm;
  public static MenuCategoryForm getmForm() {
//	if(mForm==null)
		try {
			mForm = new MenuCategoryForm();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//	else
//		setId();
	  return mForm;
}
private JLabel jLabel4;
private void initComponents() {
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabelTax = new javax.swing.JLabel("Steuer");
    
    if(StringUtils.isNotEmpty(POSConstants.Steuer))
    	jLabelTax.setText(POSConstants.Steuer);
    
    jLabel3.setText("BON:");
    jLabel4 = new javax.swing.JLabel("Price Category");
    chkVisible = new javax.swing.JCheckBox();
    chkVisible.setBackground(new Color(209, 222, 235));
    
    cbPfand = new javax.swing.JCheckBox();
    cbPfand.setBackground(new Color(209, 222, 235));
    
    tfName = new com.floreantpos.swing.FixedLengthTextField();   
    tfCategoryId = new com.floreantpos.swing.FixedLengthTextField();
    jLabel1.setText(com.floreantpos.POSConstants.NAME + ":");
    jLabel2.setText("Id:");
    cbBon = new javax.swing.JComboBox();
    cbBon.setBackground(Color.WHITE);
    typeList = new ArrayList<String>();
    typeList.add("1");
    typeList.add("2");
    typeList.add("3");
    typeList.add("4");
    for (Iterator<String> itr = typeList.iterator(); itr.hasNext();) {
      cbBon.addItem(itr.next());
    }

    cbType = new javax.swing.JComboBox();
    typeList = new ArrayList<String>();
    typeList.add(POSConstants.DINE_IN);
    typeList.add(POSConstants.HOME_DELIVERY);
    typeList.add("ZERO");
    
    if (TerminalConfig.isSupermarket()) {
      for (Iterator<String> itr = typeList.iterator(); itr.hasNext();) {
        cbType.addItem(itr.next());
      }
    } else {
      cbType.addItem(POSConstants.DINE_IN);
    }    
    
    
    cbPriceType = new javax.swing.JComboBox();
    cbPriceType.setBackground(Color.WHITE);  
    cbPriceType.addItem(String.valueOf(0));
	if(TerminalConfig.isPriceCategoryKunden()) {
		List<Customer> CustList = CustomerDAO.getInstance().findAll();
		if(CustList!=null) {
			for (Customer cust:CustList) {
				try {
					if(cust.getLoyaltyNo()!=null)
						cbPriceType.addItem(cust.getLoyaltyNo());
				}catch(Exception ex) {
					
				}
				
			}	
		}
	}else {			
		for (int i=1; i<=20;i++) {
			try {
				cbPriceType.addItem(String.valueOf(i));
			}catch(Exception ex) {
				
			}	
		
	}
	}
    

    chkVisible.setText(com.floreantpos.POSConstants.VISIBLE);
    chkVisible.setBorder(javax.swing.BorderFactory
        .createEmptyBorder(0, 0, 0, 0));
    chkVisible.setMargin(new java.awt.Insets(0, 0, 0, 0));

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
        this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(
        org.jdesktop.layout.GroupLayout.LEADING).add(
        layout
            .createSequentialGroup()
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING).add(jLabel1)
                    .add(jLabel2).add(jLabel3).add(jLabelTax).add(jLabel4))

            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tfName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        295, Short.MAX_VALUE)
                    .add(tfCategoryId,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295,
                        Short.MAX_VALUE)
                    .add(cbType, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        295, Short.MAX_VALUE)
                    .add(cbBon, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        295, Short.MAX_VALUE)
                    .add(cbPfand, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            295, Short.MAX_VALUE)
                    .add(cbPriceType, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            295, Short.MAX_VALUE)
                    .add(chkVisible)))

    );

    layout.setVerticalGroup(layout.createParallelGroup(
        org.jdesktop.layout.GroupLayout.LEADING).add(
        layout
            .createSequentialGroup()
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(tfName,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(tfCategoryId,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelTax)
                    .add(cbType,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(cbBon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cbPfand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .addContainerGap()
            .add(
                layout
                    .createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(cbPriceType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                   )
            .addContainerGap()
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(chkVisible)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE)));
  }// </editor-fold>//GEN-END:initComponents

public static void setId() {
	int value =0;
    try {
    	List<MenuCategory> mcList = MenuCategoryDAO.getInstance().findAll();
    	value = mcList.size();
    }catch(Exception ex) {
    	ex.printStackTrace();
    }
    tfCategoryId.setText((value+1)+"");
}

  @Override
protected void updateView() {
    MenuCategory foodCategory = (MenuCategory) getBean();
    if (foodCategory == null) {
      tfName.setText("");
      chkVisible.setSelected(false);
      return;
    }
    tfName.setText(foodCategory.getName());
    if(foodCategory.getCategoryid()!=null)
    tfCategoryId.setText(foodCategory.getCategoryid() + "");
    else
    setId();
    if (foodCategory.getId() == null) {
      chkVisible.setSelected(true);
    } else {
      chkVisible.setSelected(foodCategory.isVisible());
    }
    if (foodCategory.getBon() != null)
      cbBon.setSelectedItem(foodCategory.getBon().toString());
    
    cbPfand.setSelected(foodCategory.getPfand());

    cbPriceType.setSelectedItem(foodCategory.getPriceCategory().toString());
    if (foodCategory.getType() != null) {
      
      if (TerminalConfig.isSupermarket()) {
        if (foodCategory.getType().toString().compareTo(POSConstants.DINE_IN) == 0)
          cbType.setSelectedIndex(0);
        else if (foodCategory.getType().toString()
            .compareTo(POSConstants.HOME_DELIVERY) == 0)
          cbType.setSelectedIndex(1);
        else
          cbType.setSelectedIndex(2);
      } else {
        cbType.setSelectedIndex(0);
      }
    }

  }

  @Override
protected boolean updateModel() {
    MenuCategory foodCategory = (MenuCategory) getBean();
    if (foodCategory == null) {
      return false;
    }
    String categoryName = tfName.getText();
    if (POSUtil.isBlankOrNull(categoryName)) {
      MessageDialog.showError("Name is required");
      return false;
    }

    if (TerminalConfig.isSupermarket()) {
      if (cbType.getSelectedIndex() == 0)
        foodCategory.setType(POSConstants.DINE_IN);
      else if (cbType.getSelectedIndex() == 1)
        foodCategory.setType(POSConstants.HOME_DELIVERY);
      else
        foodCategory.setType("ZERO");
    }
    Integer categoryId;

    try {
      categoryId = Integer.parseInt(tfCategoryId.getText());
    } catch (Exception e) {
      POSMessageDialog.showError("Id ist ungueltig");
      return false;
    }
    foodCategory.setName(categoryName);
    foodCategory.setCategoryid(categoryId);
    foodCategory.setVisible(chkVisible.isSelected());
    foodCategory.setPriceCategory(Integer.parseInt(cbPriceType.getSelectedItem().toString()));
    if (!TerminalConfig.isSupermarket()) {
      foodCategory.setType(POSConstants.DINE_IN.toString());
    }
    foodCategory.setPfand(cbPfand.isSelected());
    foodCategory.setBon(Integer.parseInt(cbBon.getSelectedItem().toString()));
    return true;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox chkVisible;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private com.floreantpos.swing.FixedLengthTextField tfName;
  private static com.floreantpos.swing.FixedLengthTextField tfCategoryId;
  private javax.swing.JComboBox cbBon;
  private List<String> typeList;
  private javax.swing.JComboBox cbType;
  private javax.swing.JComboBox cbPriceType;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabelTax;
  private javax.swing.JCheckBox cbPfand;


  // End of variables declaration//GEN-END:variables
  @Override
  public boolean save() {
    try {
      if (!updateModel())
        return false;

      MenuCategory foodCategory = (MenuCategory) getBean();
      MenuCategoryDAO foodCategoryDAO = new MenuCategoryDAO();
      foodCategoryDAO.saveOrUpdate(foodCategory);
      return true;
    } catch (Exception x) {
      MessageDialog.showError(x);
      return false;
    }
  }
}
