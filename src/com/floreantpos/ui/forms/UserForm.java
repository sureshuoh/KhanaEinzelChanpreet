/*
 * UserForm2.java
 *
 * Created on February 8, 2008, 6:08 PM
 */

package com.floreantpos.ui.forms;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;

import net.miginfocom.swing.MigLayout;

import com.floreantpos.POSConstants;
import com.floreantpos.PosException;
import com.floreantpos.bo.ui.BackOfficeWindow;
import com.floreantpos.config.TerminalConfig;
import com.floreantpos.main.Application;
import com.floreantpos.model.User;
import com.floreantpos.model.UserType;
import com.floreantpos.model.dao.UserDAO;
import com.floreantpos.model.dao.UserTypeDAO;
import com.floreantpos.model.util.IllegalModelStateException;
import com.floreantpos.swing.ComboBoxModel;
import com.floreantpos.swing.DoubleTextField;
import com.floreantpos.swing.FixedLengthDocument;
import com.floreantpos.swing.FixedLengthTextField;
import com.floreantpos.ui.BeanEditor;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.util.POSUtil;

/**
 * 
 * @author rodaya
 */
public class UserForm extends BeanEditor {

	/** Creates new form UserForm2 */
	public UserForm() {
		initComponents();

		UserTypeDAO dao = new UserTypeDAO();
		List<UserType> userTypes = dao.findAll();

		cbUserType.setModel(new DefaultComboBoxModel(userTypes.toArray()));
	} 
	protected void doSelectImageFile() {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setMultiSelectionEnabled(false);
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		
		int option = fileChooser.showOpenDialog(null);
		
		if(option == JFileChooser.APPROVE_OPTION) {
			File imageFile = fileChooser.getSelectedFile();
			try {
				byte[] userImage = FileUtils.readFileToByteArray(imageFile);
				int imageSize = userImage.length / 1024;
				
				if(imageSize > 20) {
					POSMessageDialog.showMessage("Das Bild ist zu groß. Wählen Sie ein Bild innerhalb von 20 KB groß");
					userImage = null;
					return;
				}
				
				ImageIcon imageIcon = new ImageIcon(new ImageIcon(userImage).getImage().getScaledInstance(80, 80, Image.SCALE_SMOOTH));
				lblImagePreview.setIcon(imageIcon);
				
				User user = (User) getBean();
				
				user.setImage(userImage);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	protected void doClearImage() {
		User user = (User) getBean();
		user.setImage(null);
		lblImagePreview.setIcon(null);
	
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	  private JButton getAdimatValue;
	  private javax.swing.JPasswordField tfAdimatSecondPassword;

	private void initComponents() {
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		tfPassword1 = new javax.swing.JPasswordField(new FixedLengthDocument(4), "", 10);
		tfPassword1.setColumns(16);
		tfPassword2 = new javax.swing.JPasswordField(new FixedLengthDocument(4), "", 10);
		tfPassword2.setColumns(16);
		tfId = new FixedLengthTextField();
		tfSsn = new FixedLengthTextField();
		tfSsn.setLength(30);
		tfSsn.setColumns(30);
		tfFirstName = new FixedLengthTextField();
		tfFirstName.setColumns(30);
		tfFirstName.setLength(30);
		tfLastName = new FixedLengthTextField();
		tfLastName.setLength(30);
		tfLastName.setColumns(30);
		jLabel5 = new javax.swing.JLabel();
		jLabelKost = new javax.swing.JLabel();
		tfCostPerHour = new DoubleTextField();
		jLabel6 = new javax.swing.JLabel();
		jLabel_Verfuegbar= new javax.swing.JLabel();
		
		cbUserType = new javax.swing.JComboBox();
		
		setLayout(new MigLayout("", "[134px][204px,grow]", "[19px][][19px][19px][19px][19px][19px][19px][24px][]"));

		jLabel1.setText("ID");
		add(jLabel1, "cell 0 0,alignx trailing,aligny center");

		lblPhone = new JLabel("Telefon");
		if(StringUtils.isNotEmpty(POSConstants.Telefon))
			lblPhone.setText(POSConstants.Telefon);
		else
			lblPhone.setText("Telefon");
		
		add(lblPhone, "cell 0 1,alignx trailing");

		tfPhone = new FixedLengthTextField();
		tfPhone.setLength(20);
		tfPhone.setColumns(20);
		add(tfPhone, "cell 1 1,growx");

		jLabel2.setText("SSN");
		add(jLabel2, "cell 0 2,alignx trailing,aligny center");

		jLabel3.setText("Vorname");		
		if(StringUtils.isNotEmpty(POSConstants.Vorname))
			jLabel3.setText(POSConstants.Vorname);
		else
			jLabel3.setText("Vorname");
		
		add(jLabel3, "cell 0 3,alignx trailing,aligny center");

		jLabel4.setText("Nachname");
		if(StringUtils.isNotEmpty(POSConstants.Nachname))
			jLabel4.setText(POSConstants.Nachname);
		else
			jLabel4.setText("Nachname");
		
		add(jLabel4, "cell 0 4,alignx trailing,aligny center");

		jLabel9.setText("Passcode");
		if(StringUtils.isNotEmpty(POSConstants.Passcode))
			jLabel9.setText(POSConstants.Passcode);
		else
			jLabel9.setText("Passcode");
		
		add(jLabel9, "cell 0 5,alignx trailing,aligny center");

		jLabel10.setText("Bestaetigen Key");
		if(StringUtils.isNotEmpty(POSConstants.Bestaetigen_Key))
			jLabel10.setText(POSConstants.Bestaetigen_Key);
		else
			jLabel10.setText("Bestaetigen Key");
		
		 tfAdimatSecondPassword = new javax.swing.JPasswordField(new FixedLengthDocument(
		            50), "", 50);
		    tfAdimatSecondPassword.setColumns(30);
		
		
		getAdimatValue = new JButton("Get Key");
	    getAdimatValue.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(TerminalConfig.getKeyType().compareTo("addimat")==0)
						tfAdimatSecondPassword.setText(Application.getInstance().getAdiListener().getVcp().getValue());
					else if(TerminalConfig.getKeyType().compareTo("ibutton")==0)
						tfAdimatSecondPassword.setText(Application.getInstance().getIbuttonListener().getValue());
					else
						tfAdimatSecondPassword.setText(Application.getInstance().getNcrListener().getValue());
				}catch(Exception ext) {
					if(TerminalConfig.getKeyType().compareTo("addimat")==0)
						Application.getInstance().startAdimat();
					else if(TerminalConfig.getKeyType().compareTo("ibutton")==0)
						Application.getInstance().startIbutton();
					else
						Application.getInstance().startNcrDalaas();
					JOptionPane.showMessageDialog(BackOfficeWindow.getInstance(), "Bitte Versuchen noch Einmal");
//					SwingUtilities.invokeLater(new Runnable() {
//						
//						@Override
//						public void run() {
//							if(Application.getInstance().getAdiListener().getVcp().isOpen())
//								Application.getInstance().getAdiListener().shutdown();						
//						}
//					});				
				}			
			}
		});
	    
		
		add(tfId, "cell 1 0,growx,aligny center");
		add(tfSsn, "cell 1 2,aligny center");
		add(tfFirstName, "cell 1 3,growx,aligny center");
		add(tfLastName, "cell 1 4,growx,aligny center");
		add(jLabel10, "cell 0 6,alignx trailing,aligny center");
		add(tfPassword1, "cell 1 5,growx,aligny center");
		add(tfPassword2, "cell 1 6,growx,aligny center");
		
		jLabelKost.setText("Schlüssel");
		
		if(StringUtils.isNotEmpty(POSConstants.Schluessel))
			jLabelKost.setText(POSConstants.Schluessel);
		else
			jLabelKost.setText("Schlüssel");
		
		    add(jLabelKost,"cell 0 7,alignx trailing,aligny center");
		    add(tfAdimatSecondPassword, "cell 1 7,growx,aligny center");  
		    add(getAdimatValue, "cell 2 7,growx,aligny center");
		    
		jLabel5.setText("Kostet pro Stunde");
		if(StringUtils.isNotEmpty(POSConstants.Kostet_pro_Stunde))
			jLabel5.setText(POSConstants.Kostet_pro_Stunde);
		else
			jLabel5.setText("Kostet pro Stunde");
		
		add(jLabel5, "cell 0 8,alignx trailing,aligny center");
		add(tfCostPerHour, "cell 1 8,growx,aligny center");

		jLabel6.setText("Benutzertyp");
		if(StringUtils.isNotEmpty(POSConstants.Benutzertyp))
			jLabel6.setText(POSConstants.Benutzertyp);
		else
			jLabel6.setText("Benutzertyp");
		
		add(jLabel6, "cell 0 9,alignx trailing,aligny center");

		cbUserType.setBackground(Color.WHITE);
		cbUserType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Manager", "Cashier", "Server" }));
		add(cbUserType, "cell 1 9,growx,aligny center");
		
		jLabel_Verfuegbar.setText("Verfuegbar");
		if(StringUtils.isNotEmpty(POSConstants.Verfuegbar_))
			jLabel_Verfuegbar.setText(POSConstants.Verfuegbar_);
		else
			jLabel_Verfuegbar.setText("Verfuegbar");
		
		add(jLabel_Verfuegbar, "cell 0 10,alignx trailing,aligny center");
		
		List<String> yesnolist = new ArrayList();
		yesnolist.add("Ja");
		yesnolist.add("Nein");
		yesno = new JComboBox();
		yesno.setBackground(Color.WHITE);
		yesno.setModel(new ComboBoxModel(yesnolist));
		add(yesno, "cell 1 10,growx,aligny center");
		
		
		 JLabel lblImage = new JLabel("Bild:");
		 if(StringUtils.isNotEmpty(POSConstants.Bild))
			 lblImage.setText(POSConstants.Bild);
			else
				lblImage.setText("Bild:");
		 
	     lblImage.setHorizontalAlignment(SwingConstants.TRAILING);
	       
	     lblImagePreview = new JLabel("");
	     lblImagePreview.setHorizontalAlignment(JLabel.CENTER);
	     lblImagePreview.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
	     lblImagePreview.setPreferredSize(new Dimension(60, 120));
	        
	        
	     JButton btnSelectImage = new JButton("...");
	     btnSelectImage.addActionListener(new ActionListener() {
	     public void actionPerformed(ActionEvent e) {
	     		doSelectImageFile();
	     	}
	     }); 
	       
	     btnClearImage = new JButton("entfernen");
	     if(StringUtils.isNotEmpty(POSConstants.entfernen))
	    	 btnClearImage.setText(POSConstants.entfernen);
			else
				btnClearImage.setText("entfernen");
	     
	     btnClearImage.addActionListener(new ActionListener() {
	     public void actionPerformed(ActionEvent e) {
	      		doClearImage();
	       	}
	     });
	     add(lblImage, "cell 0 11,growx,aligny center");
	     add(lblImagePreview, "cell 1 11,growx,aligny center");
	     add(btnClearImage, "cell 3 11,growx,aligny center");
	     
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JComboBox cbUserType;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabelKost;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel_Verfuegbar;
	private javax.swing.JLabel jLabel9;
	private DoubleTextField tfCostPerHour;
	private FixedLengthTextField tfFirstName;
	private FixedLengthTextField tfId;
	private FixedLengthTextField tfLastName;
	private javax.swing.JPasswordField tfPassword1;
	private javax.swing.JPasswordField tfPassword2;
	private JComboBox yesno;
	private FixedLengthTextField tfSsn;
	private JLabel lblImagePreview;
	private JButton btnClearImage;
	// End of variables declaration//GEN-END:variables

	@Override
	public String getDisplayText() {
		if (isEditMode())
			return "Edit User";

		return "Neuen Benutzer hinzufügen";
	}

	private boolean editMode;
	private JLabel lblPhone;
	private FixedLengthTextField tfPhone;
	@Override
	public boolean save() {
		try {
			updateModel();
		} catch (IllegalModelStateException e) {
			POSMessageDialog.showError(this, e.getMessage());
			return false;
		}

		User user = (User) getBean();
		UserDAO userDAO = UserDAO.getInstance();

		if (!editMode) {
			if (userDAO.isUserExist(user.getUserId())) {
				POSMessageDialog.showError(this, "User with ID: " + user.getUserId() + " already exists.");
				return false;
			}
		}

		try {
			userDAO.saveOrUpdate(user, editMode);
		} catch (PosException x) {
			POSMessageDialog.showError(this, x.getMessage(), x);
			x.printStackTrace();
			return false;
		} catch (Exception x) {
			POSMessageDialog.showError(this, "Could not save user", x);
			x.printStackTrace();
			return false;
		}

		return true;
	}

	@Override
	protected boolean updateModel() throws IllegalModelStateException {
		User user = null;
		if (!(getBean() instanceof User)) {
			user = new User();
		}
		else {
			user = (User) getBean();
		}

		int id = 1000;
		try {
			id = Integer.parseInt(tfId.getText());
		} catch (Exception x) {
			throw new IllegalModelStateException("ID is not valid");
		}

		String ssn = tfSsn.getText();
		String firstName = tfFirstName.getText();
		String lastName = tfLastName.getText();
		String secretKey1 = new String(tfPassword1.getPassword());
		String secretKey2 = new String(tfPassword2.getPassword());
		String adimatKey = new String(tfAdimatSecondPassword.getText());

		if (POSUtil.isBlankOrNull(firstName)) {
			throw new IllegalModelStateException("First name cannot be empty");
		}
		if (POSUtil.isBlankOrNull(lastName)) {
			throw new IllegalModelStateException("Last name cannot be empty");
		}
		if (POSUtil.isBlankOrNull(secretKey1)) {
			throw new IllegalModelStateException("Secret key cannot be empty");
		}
		if (POSUtil.isBlankOrNull(secretKey2)) {
			throw new IllegalModelStateException("Secret key cannot be empty");
		}
		if (!secretKey1.equals(secretKey2)) {
			throw new IllegalModelStateException("Secret key did not match");
		}

		if (!isEditMode()) {
			User userBySecretKey = UserDAO.getInstance().findUserBySecretKey(secretKey1);
			if (userBySecretKey != null) {
				throw new IllegalModelStateException("Secret key must be unique. An user with the secret key already exists.");
			}
		}

		double cost = 0;
		try {
			cost = Double.parseDouble(tfCostPerHour.getText());
		} catch (Exception x) {
			throw new IllegalModelStateException("Cost per hour for " + firstName + " " + lastName + " is not valid.");
		}

		user.setType((UserType) cbUserType.getSelectedItem());
		user.setCostPerHour(cost);

		user.setSsn(ssn);
		user.setUserId(id);
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setPhoneNo(tfPhone.getText());
		user.setPassword(secretKey1);
		 
		if(!POSUtil.isBlankOrNull(adimatKey))    	
	    	user.setAddimatpassword(adimatKey);
	    else
	    	user.setAddimatpassword("");
		if(yesno.getSelectedIndex() == 0)
			user.setAvailableForDelivery(true);
		else
			user.setAvailableForDelivery(false);
		setBean(user);
		return true;
	}

	@Override
	protected void updateView() {
		if (!(getBean() instanceof User)) {
			return;
		}
		User user = (User) getBean();
		setData(user);
	}

	private void setData(User data) {
		if (data.getUserId() != null) {
			tfId.setText(String.valueOf(data.getUserId()));
		}
		else {
			tfId.setText("");
		}
		if (data.getSsn() != null) {
			tfSsn.setText(data.getSsn());
		}
		else {
			tfSsn.setText("");
		}
		tfFirstName.setText(data.getFirstName());
		tfLastName.setText(data.getLastName());
		tfPassword1.setText(data.getPassword());
		tfPassword2.setText(data.getPassword());
		tfPhone.setText(data.getPhoneNo());
		
		 if(!POSUtil.isBlankOrNull(data.getAddimatpassword()))
			    tfAdimatSecondPassword.setText(data.getAddimatpassword());
		cbUserType.setSelectedItem(data.getType());
		if(data.isAvailableForDelivery())
			yesno.setSelectedIndex(0);
		else
			yesno.setSelectedIndex(1);
		Double costPerHour = data.getCostPerHour();
		if(costPerHour == null) {
			costPerHour = 0.0;
		}
		
		tfCostPerHour.setText(String.valueOf(costPerHour));
		if(data.getImage() != null) {
			ImageIcon imageIcon = new ImageIcon(new ImageIcon(data.getImage()).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
			lblImagePreview.setIcon(imageIcon);
		}
	}

	public boolean isEditMode() {
		return editMode;
	}

	public void setEditMode(boolean editMode) {
		this.editMode = editMode;
		if (editMode) {
			tfId.setEditable(false);
		}
		else {
			tfId.setEditable(true);
		}
	}

	public void setId(Integer id) {
		if (id != null) {
			tfId.setText(String.valueOf(id.intValue()));
		}
	}
}
